#!/usr/bin/env python
# coding: utf-8

# In[6]:


import numpy as np
import pandas as pd
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn import metrics 


# In[2]:


def entropy(data):
    unique , counts = np.unique(data, return_counts = True)
    px = counts / len(data)
    return -np.sum(px * np.log2(px))


# In[3]:


class Node:

    def __init__(self, feature=None, threshold=None, left_node=None, right_node=None, *, output_class=None):
        self.feature = feature
        self.threshold = threshold
        self.left_node = left_node
        self.right_node = right_node
        self.output_class = output_class

    def is_leaf(self):
        return self.output_class != None


# In[4]:


class DecisionTree:

    def __init__(self, minsplit=2, max_depth=100):
        self.minsplit = minsplit
        self.max_depth = max_depth
        self.n_feats = None
        self.root = None

    def fit(self, X, y):
        self.n_feats = X.shape[1]# if not self.n_feats else min(self.n_feats, X.shape[1])
        self.root = self.grow_tree(X, y)

    def predict(self, X):
        #predict by traversing the tree until a leaf node is reached
        return np.array([self.traverse_tree(x, self.root) for x in X])

    def grow_tree(self, X, y, depth=0):
        n_samples, n_features = X.shape
        n_labels = len(np.unique(y))

        #recursion stopping criteria
        if (depth >= self.max_depth
                or n_labels == 1
                or n_samples < self.minsplit):
            leaf_value = self.most_common_class(y)
            return Node(output_class=leaf_value)

        feat_inxs = np.random.choice(n_features, self.n_feats, replace=False)

        # greedily select the best split according to information gain
        best_feat, best_thresh = self.best_criteria(X, y, feat_inxs)
        
        # grow the children that result from the split
        left_inxs, right_inxs = self.split(X[:, best_feat], best_thresh)
        left = self.grow_tree(X[left_inxs, :], y[left_inxs], depth+1)
        right = self.grow_tree(X[right_inxs, :], y[right_inxs], depth+1)
        return Node(best_feat, best_thresh, left, right)

    def best_criteria(self, X, y, feat_inxs):
        best_gain = -1
        split_inx, split_thresh = None, None
        for feat_inx in feat_inxs:
            X_column = X[:, feat_inx]
            thresholds = np.unique(X_column)
            for threshold in thresholds:
                gain = self.info_gain(y, X_column, threshold)

                if gain > best_gain:
                    best_gain = gain
                    split_inx = feat_inx
                    split_thresh = threshold

        return split_inx, split_thresh

    def info_gain(self, y, X_column, split_thresh):
        # parent loss
        parent_entropy = entropy(y)

        # generate split
        left_inxs, right_inxs = self.split(X_column, split_thresh)

        if len(left_inxs) == 0 or len(right_inxs) == 0:
            return 0

        # compute the weighted avg. of the loss for the children
        n = len(y)
        n_l, n_r = len(left_inxs), len(right_inxs)
        e_l, e_r = entropy(y[left_inxs]), entropy(y[right_inxs])
        child_entropy = (n_l / n) * e_l + (n_r / n) * e_r

        # information gain is difference in loss before vs. after split
        gain = parent_entropy - child_entropy
        return gain

    def split(self, X_column, split_thresh):
        left_inxs = np.argwhere(X_column <= split_thresh).flatten()
        right_inxs = np.argwhere(X_column > split_thresh).flatten()
        return left_inxs, right_inxs

    def traverse_tree(self, x, node):
        #recursion stopping criteria
        if node.is_leaf():
            return node.output_class

        if x[node.feature] <= node.threshold:
            return self.traverse_tree(x, node.left_node)
        return self.traverse_tree(x, node.right_node)

    def most_common_class(self, y):
        cls , count = np.unique(y, return_counts = True)
        mx = np.argmax(count)
        return cls[mx]


# In[7]:


dataset = pd.read_csv("../Dataset/raw-banknote-data.csv",sep = ";")
dataset.head()

X = dataset.drop(columns = ["class"])
y = dataset.drop(columns = ["variance of image","skewness of image", "curtosis of image" , "entropy of image"])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


# In[13]:


clf = DecisionTree(max_depth=10)
clf.fit(X_train.to_numpy(), y_train.to_numpy())
    
y_pred = clf.predict(X_test.to_numpy())

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))


# In[ ]:



